#lang rhombus

// this corresponds to step 8 in "More"

import:
  rhombus/meta open
  rhombus/compat/port open
  rhombus/compat/thread open
  rhombus/compat/custodian as Cust
  rhombus/compat/tcp as TCP
  rhombus/compat/time as Time
  rhombus/compat/function open
  rhombus/compat/url
  rhombus/compat/extra open
  rhombus/compat/format
 
import:
  lib("racket/control.rkt") as control
  lib("racket/base.rkt") as r:
    rename:
      #{regexp-match} as regexp_match
      #{hash-ref} as hash_ref
      #{current-inexact-milliseconds} as current_inexact_milliseconds
  
import:
  lib("xml/main.rkt") as xml:
    rename:
      #{xexpr->string} as to_string
      
    
    
/* ************************************************
 *  actual code starts here
 *
 */

fun serve(port):
  let main_cust = Cust.make()
  parameterize {Cust.current: main_cust}:
    let listener: TCP.listen(port, 5, #true)
    thread:
      loop:
        accept_and_handle(listener)
  thunk: main_cust.shutdown()

fun accept_and_handle(listener :: TCP.Listener):
  let cust = Cust.make()
  cust.limit_memory(50 * 1024 * 1024)
  parameterize {Cust.current: cust}:
    let (in, out) = listener.accept()
    handle(in, out)
    in.close(); out.close()
    
  thread:
    Time.sleep(10)
    cust.shutdown()

    
fun handle(in :: InputPort,out :: OutputPort):
  let s = in.readline()
  print(s)
  // Match the first line to extract the request:
  let req = r.regexp_match(#{#rx"^GET (.+) HTTP/[0-9]+\\.[0-9]+"}, s)
  println(req)
  when req
  | // Discard the request header (up to blank line)  
    in.match(#{#rx"(\r\n|^)\r\n"})
    let xexpr: control.prompt(req[1] |> dispatch)
    // Send reply
    out.display("HTTP/1.0 200 Okay\r\n")
    out.display("Server: k\r\nContent-Type: text/html\r\n\r\n")
    out.display(xml.to_string(xexpr))


def dispatch_table: MutableMap()

fun dispatch(strpath :: StringView):
  let u = strpath |> url.from_string
  def [p, ...]: u |> url.path
  def path: [url.param_path(p), ...]
  def h: r.hash_ref(dispatch_table, to_string(path[0]), #false)
  if h
  | u |> url.query |> h
  | [#'html, [#'head, [#'title, "Error"]],
     [#'body,
      [#'font, [[#'color, "red"]],
       "Unknown page: ",
       strpath]]]



fun build_req_page(label, next, hidden):
  [#'html,
   [#'head, [#'title, "Enter a Number to Add"]],
   [#'body, [[#'bgcolor, "white"]],
    [#'form, [[#'action ,next], [#'method, "get"]],
     label,
     [#'input, [[#'type, "text"], [#'name, "number"],
                [#'value, ""]]],
     [#'input, [[#'type, "hidden"], [#'name, "hidden"], 
                [#'value ,hidden]]],
     [#'input, [[#'type, "submit"], [#'name, "enter"],
                [#'value, "Enter"]]]]]]


fun many(query): build_req_page("Number of greetings:", "/reply", "")
                 
fun reply(query :: Map.of(Symbol, Maybe(String))):
  let n: query[#'number] |> String.to_number
  [#'html,
   List.cons(#'body, for List: each i: 0..n
                               " hello")]

dispatch_table["hello"] := fun(query): [#'html, [#'body, "Hello, World"]]
dispatch_table["rhombus"] := fun(query): [#'html, [#'body, "Rhombus is cool"]]
dispatch_table["many"] := many
dispatch_table["reply"] := reply


fun sum(q): build_req_page("First number:", "/one", "")
fun one(q :: Map): build_req_page("Second number:", "/two", q[#'number])
fun two(q :: Map):
  let n: q[#'hidden] |> String.to_number
  let m: q[#'number] |> String.to_number
  [#'html, [#'body, "The sum is ", format.a(m + n)]]


dispatch_table["sum"] := sum
dispatch_table["one"] := one
dispatch_table["two"] := two


// helpers for continuation version

fun send_suspend(mk):
  letcc k:
    let tag: r.format("k~a", Time.now_inexact())
    dispatch_table[tag] := k
    ("/" ++ tag) |> mk |> control.abort

fun get_number(label):
  let query :: Map = send_suspend(fun (n): build_req_page(label, n, ""))
  query[#'number] |> String.to_number

// New direct version

fun sum2(q):
  let m: get_number("First number:")
  let n: get_number("Second number:")
  [#'html, [#'body, "The sum is ", format.a(n+m)]]

dispatch_table["sum2"] := sum2

