#lang rhombus
// Note: needs comment-out support in DrR
// How do I write multiple-clause syntax-rules?
// Parameterize is hard to do
// a.b is unexpectedly low precedence, weird to have to f((a.b),c) // Maybe this was just my bad macro?
// writing macros is really hard
// should `prefix url` be `prefix: url`
// want multiple val bindings without repeating `val`
// how to do hash-ref with failure value?
// how do you write quoted data?
// need fancy-app
// enter! at the repl works out poorly
// DrRacket + errortrace + rhombus seems to have weird interaction bugs after i click on some arrows
// for macros?
// syntax for cons
// why can't I indent function bodies more left?
// prefixes mean it matters a lot more what things are exported from where (eg is string->number in racket/string)
// How to annotate imports with static info?

import:
  rhombus/macro: no_prefix
  rhombus/compat/parameterize: no_prefix
  rhombus/compat/custodian: no_prefix
  rhombus/compat/tcp: no_prefix
  rhombus/compat/thread: no_prefix
  rhombus/compat/port: no_prefix
  rhombus/compat/dict: no_prefix
  rhombus/compat/url: no_prefix
  rhombus/compat/string: no_prefix
  rhombus/compat/format: no_prefix
  rhombus/compat/xml: no_prefix
  "library.rhm": no_prefix
  racket/control

  racket/list: prefix l
  
  racket/base:
    prefix r
    rename:
      #{regexp-match} ~to regexp_match
      #{make-hash} ~to make_hash
      #{current-inexact-milliseconds} ~to current_inexact_milliseconds

fun map(f): fun(l): r.map(f,l)


/* ************************************************
 *  actual code starts here
 *
 */


fun serve(port -: Number):
  val main_cust :: Custodian: custodian.make()
  // weird precedence here requires extra parens
  parameterize (custodian.current: main_cust):
    val listener: tcp.listen(port, 5, #true)
    thread:
      loop:
        accept_and_handle(listener)
  thunk: main_cust.shutdown()

fun accept_and_handle(listener -: Tcp):
  val cust :: Custodian: custodian.make()
  cust.limit_memory(50 * 1024 * 1024)
  parameterize (custodian.current: cust):
    val (in -: Port, out -: Port): listener.accept()
    thread:
      handle(in,out)
      in.close(); out.close()
  thread:
    r.sleep(10)
    cust.shutdown()

    
fun handle(in -: Port,out -: Port):
  // Discard the request header (up to blank line):
  val req: r.regexp_match(#{#rx"^GET (.+) HTTP/[0-9]+\\.[0-9]+"}, in.readline())
  when req:
    in.match(#{#rx"(\r\n|^)\r\n"})
    val xexpr: control.prompt(req[1] |> dispatch)
    // Send reply
    out.display("HTTP/1.0 200 Okay\r\n")
    out.display("Server: k\r\nContent-Type: text/html\r\n\r\n")
    out.display(xml.to_string(xexpr))


val dispatch_table :: Map: r.make_hash()

fun dispatch(strpath :: String):
  val u: strpath |> url.from_string
  val path: u |> url.path |> map(url.param_path)
  val h: dict.ref(dispatch_table, path[0], #false) // dispatch_table[path[0]]
  if h
  | u |> url.query |> h
  | [s html, [s head, [s title, "Error"]],
     [s body,
      [s font, [[s color, "red"]],
       "Unknown page: ",
       strpath]]]



fun build_req_page(label, next, hidden):
  [s html,
   [s head, [s title, "Enter a Number to Add"]],
   [s body, [[s bgcolor, "white"]],
    [s form, [[s action ,next], [s method, "get"]],
     label,
     [s input, [[s type, "text"], [s name, "number"],
                [s value, ""]]],
     [s input, [[s type, "hidden"], [s name, "hidden"],
                [s value ,hidden]]],
     [s input, [[s type, "submit"], [s name, "enter"],
                [s value, "Enter"]]]]]]


fun many(query): build_req_page("Number of greetings:", "/reply", "")
                 
fun reply(query :: Dict):
  val n: query.ref(s number) |> string.to_number
  [s html,
   cons(s body, r.map(fun (n):" hello", l.range(n)))]
  
dispatch_table["hello"] = fun(query :: Dict): [s html, [s body, "Hello, World"]]
dispatch_table["rhombus"] = fun(query :: Dict): [s html, [s body, "Rhombus is cool"]]
dispatch_table["many"] = many
dispatch_table["reply"] = reply


// ----------------------------------------
// Old, awkward version:

fun sum(q): build_req_page("First number:", "/one", "")
fun one(q :: Dict): build_req_page("Second number:", "/two", q.ref(s number))
fun two(q :: Dict):
  val n: q.ref(s hidden) |> string.to_number
  val m: q.ref(s number) |> string.to_number
  [s html, [s body, "The sum is ", format.a(m + n)]]


dispatch_table["sum"] = sum
dispatch_table["one"] = one
dispatch_table["two"] = two


// helpers for continuation version

fun send_suspend(mk):
  letcc k:
    val tag: r.format("k~a", r.current_inexact_milliseconds())
    dispatch_table[tag] = k
    // write | instead of |> and get a bad error message
    ("/" ++ tag) |> mk |> control.abort

fun get_number(label):
  val query :: Dict : send_suspend(fun (kurl): build_req_page(label, kurl, ""))
  query.ref(s number) |> string.to_number

// New direct version

fun sum2(q):
  val m: get_number("First number:")
  val n: get_number("Second number:")
  [s html, [s body, "The sum is ", format.a(n+m)]]

dispatch_table["sum2"] = sum2
