#lang rhombus
import:
  rhombus/compat/port open
  rhombus/compat/thread open
  rhombus/compat/custodian as Cust
  rhombus/compat/tcp as TCP
  rhombus/compat/function open
  rhombus/compat/time as Time

fun serve(port):
  let main_cust = Cust.make()
  parameterize {Cust.current: main_cust}:
    let listener: TCP.listen(port, 5, #true)
    thread:
      loop:
        accept_and_handle(listener)
  thunk: main_cust.shutdown()

fun accept_and_handle(listener :: TCP.Listener):
  let cust = Cust.make()
 
  parameterize {Cust.current: cust}:
    let (in, out) = listener.accept()
    handle(in, out)
    in.close(); out.close()
    
  thread:
    Time.sleep(10)
    cust.shutdown()

    
fun handle(in :: InputPort, out :: OutputPort):
  // Discard the request header (up to blank line):
  in.match(#{#rx"(\r\n|^)\r\n"})
  // Send reply
  out.display("HTTP/1.0 200 Okay\r\n")
  out.display("Server: k\r\nContent-Type: text/html\r\n\r\n")
  out.display("<html><body>Hello, world! "++ to_string(Time.now()) ++ "</body></html>")
