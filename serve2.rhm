#lang rhombus

// this corresponds to step 6 in "More"

// let should work at the repl
// the mutable string situation is bad
// how to do hash-ref with failure value?
// need fancy-app
// enter! at the repl works out poorly
// DrRacket + errortrace + rhombus seems to have weird interaction bugs after i click on some arrows
// syntax for cons?
// should indexing be dict-ref?
// how do I write `for List` on one line?

import:
  rhombus/meta open
  rhombus/compat/port open
  rhombus/compat/thread open
  rhombus/compat/custodian as C
  rhombus/compat/tcp as T 
  rhombus/compat/function open
  rhombus/compat/url
 
import:
  lib("racket/base.rkt") as r: // for sleep()
    rename:
      #{regexp-match} as regexp_match
      #{hash-ref} as hash_ref
  
import:
  lib("racket/dict.rkt") as dict
  lib("xml/main.rkt") as xml:
    rename:
      #{xexpr->string} as to_string
      
    
    
operator (a |> b): b(a)

/* ************************************************
 *  actual code starts here
 *
 */

fun serve(port):
  let main_cust :: C.Custodian = C.make()
  parameterize {C.current: main_cust}:
    let listener: T.listen(port, 5, #true)
    thread:
      loop:
        accept_and_handle(listener)
  thunk: main_cust.shutdown()

fun accept_and_handle(listener :: T.TcpListener):
  let cust :: C.Custodian = C.make()
 
  parameterize {C.current: cust}:
    let (in :: Port, out :: Port) = listener.accept()
    handle(in, out)
    in.close(); out.close()
    
  thread:
    r.sleep(10)
    cust.shutdown()

    
fun handle(in :: InputPort,out :: OutputPort):
  let s = in.readline()
  print(s)
  // Match the first line to extract the request:
  let req = r.regexp_match(#{#rx"^GET (.+) HTTP/[0-9]+\\.[0-9]+"}, s)
  println(req)
  when req
  | // Discard the request header (up to blank line)  
    in.match(#{#rx"(\r\n|^)\r\n"})
    let xexpr: req[1] |> dispatch
    // Send reply
    out.display("HTTP/1.0 200 Okay\r\n")
    out.display("Server: k\r\nContent-Type: text/html\r\n\r\n")
    out.display(xml.to_string(xexpr))


def dispatch_table: MutableMap()

fun dispatch(strpath :: StringView):
  let u = strpath |> url.from_string
  def [p, ...]: u |> url.path
  def path: [url.param_path(p), ...]
  def h: r.hash_ref(dispatch_table, to_string(path[0]), #false)
  if h
  | u |> url.query |> h
  | [#'html, [#'head, [#'title, "Error"]],
     [#'body,
      [#'font, [[#'color, "red"]],
       "Unknown page: ",
       strpath]]]



fun build_req_page(label, next, hidden):
  [#'html,
   [#'head, [#'title, "Enter a Number to Add"]],
   [#'body, [[#'bgcolor, "white"]],
    [#'form, [[#'action ,next], [#'method, "get"]],
     label,
     [#'input, [[#'type, "text"], [#'name, "number"],
                [#'value, ""]]],
     [#'input, [[#'type, "hidden"], [#'name, "hidden"], 
                [#'value ,hidden]]],
     [#'input, [[#'type, "submit"], [#'name, "enter"],
                [#'value, "Enter"]]]]]]


fun many(query): build_req_page("Number of greetings:", "/reply", "")
                 
fun reply(query :: Map.of(Symbol, Maybe(String))):
  let n: query[#'number] |> String.to_number
  [#'html,
   List.cons(#'body, for List: each i: 0..n
                               " hello")]

dispatch_table["hello"] := fun(query): [#'html, [#'body, "Hello, World"]]
dispatch_table["rhombus"] := fun(query): [#'html, [#'body, "Rhombus is cool"]]
dispatch_table["many"] := many
dispatch_table["reply"] := reply
